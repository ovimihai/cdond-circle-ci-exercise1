version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
commands:
  
  test_rollback:
    steps:
      - run:
          name: Test rollback
          when: on_fail
          command: echo "Rollback"

  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-2022
# Define the jobs we want to run for this project
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: | # ${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-2022 \
              --region ${AWS_DEFAULT_REGION}
      - run:
        name: Get machine ip
          command: |
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - inventory.txt
      # - destroy_environment
      #   when: on_fail
      - test_rollback:
        when: on_fail
  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["cf:dd:21:72:b3:b5:53:66:16:32:e3:b7:01:7c:6b:6f"] 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main.yml
      # - destroy_environment
      #   when: on_fail
  
  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      # - destroy_environment
      #   when: on_fail
  do_rollback:
    steps:
      - return 1
      - test_rollback:
        when: on_fail

# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure
      - do_rollback
          requires:
            - smoke_test
      # - destroy_environment:
      #     requires:
      #       - configure_infrastructure